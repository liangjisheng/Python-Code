# -*- coding:utf-8 -*-
"""
@project = 0523-2
@file = single_underline
@author = Liangjisheng
@create_time = 2018/5/23 0023 下午 16:56
"""
# 下划线前缀的含义是告知其他程序员：以单个下划线开头的变量或方法仅供内部使用
# 该约定在PEP8中有定义,这不是Python强制规定的
class Test(object):
    def __init__(self):
        self.foo = 11
        self._bar = 23

t = Test()
print(t.foo)
# 你会看到_bar中的单个下划线并没有阻止我们“进入”类并访问该变量的值
# 这是因为Python中的单个下划线前缀仅仅是一个约定 - 至少相对于变量和方法名而言
print(t._bar)
# 单个下划线是一个Python命名约定，表示这个名称是供内部使用的
# 它通常不由Python解释器强制执行，仅仅作为一种对程序员的提示

# 单个末尾下划线(后缀)是一个约定,用来避免与Python关键字产生命名冲突.PEP8解释了这个约定

# 按照习惯，有时候单个独立下划线是用作一个名字，来表示某个变量是临时的或无关紧要的
# 例如，在下面的循环中，我们不需要访问正在运行的索引，我们可以使用“_”来表示它只是一个临时值
for _ in range(5):
    print('hello')

# 在下面的代码示例中，我将汽车元组拆分为单独的变量，但我只对颜色和里程值感兴趣
#  但是，为了使拆分表达式成功运行，我需要将包含在元组中的所有值分配给变量
# 在这种情况下，“_”作为占位符变量可以派上用场
car = ('red', 'auto', 12, 3812.4)
color, _, _, mileage = car
print(color)
print(mileage)

# 除了用作临时变量之外，“_”是大多数Python REPL中的一个特殊变量，
# 它表示由解释器评估的最近一个表达式的结果
